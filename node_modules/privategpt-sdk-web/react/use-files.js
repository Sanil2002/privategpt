import useSWR from 'swr';
import useSWRMutation from 'swr/mutation';
export const useFiles = ({ client, fetchFiles = false }) => {
    const getFiles = async () => {
        const response = await client.ingestion.listIngested();
        const files = response.data.reduce((acc, file) => {
            const name = file.docMetadata?.file_name;
            const parent = acc.find((f) => f.fileName === name);
            if (parent) {
                parent.docs.push(file);
                return acc;
            }
            return [
                ...acc,
                {
                    fileName: name,
                    docs: [file],
                },
            ];
        }, []);
        return files;
    };
    const { data: files, isLoading: isFetchingFiles, mutate: refetch, error: errorFetchingFiles, } = useSWR(['files'], fetchFiles ? getFiles : null);
    const uploadFile = async (_, { arg }) => {
        const response = await client.ingestion.ingestFile(arg);
        return response.data;
    };
    const { trigger: addFile, isMutating: isUploadingFile, error: errorUploadingFile, } = useSWRMutation('uploadFile', uploadFile, {
        onSuccess: () => {
            refetch();
        },
    });
    const deleteFileFn = async (_, { arg }) => {
        if (!files)
            return;
        const parent = files.find((f) => f.fileName === arg);
        if (!parent)
            return;
        for (const doc of parent.docs) {
            await client.ingestion.deleteIngested(doc.docId);
        }
    };
    const { trigger: deleteFile, isMutating: isDeletingFile, error: errorDeletingFile, } = useSWRMutation('deleteFile', deleteFileFn, {
        onSuccess: () => {
            refetch();
        },
    });
    return {
        addFile,
        isUploadingFile,
        isDeletingFile,
        files,
        deleteFile,
        isFetchingFiles,
        errorDeletingFile,
        errorFetchingFiles,
        errorUploadingFile,
    };
};
