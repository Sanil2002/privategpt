{
  "version": 3,
  "sources": ["../../url-join/lib/url-join.js", "../../privategpt-sdk-utils/api/index.js", "../../privategpt-sdk-utils/api/resources/embeddings/index.js", "../../privategpt-sdk-utils/api/resources/contextualCompletions/index.js", "../../privategpt-sdk-utils/api/resources/contextChunks/index.js", "../../privategpt-sdk-utils/api/resources/ingestion/index.js", "../../privategpt-sdk-utils/api/resources/health/index.js", "../../privategpt-sdk-utils/errors/PrivategptApiError.js", "../../privategpt-sdk-utils/errors/PrivategptApiTimeoutError.js", "../../privategpt-sdk-utils/api/resources/recipes/summarize/client/Client.js", "../../privategpt-sdk-utils/api/resources/recipes/Client.js", "../../privategpt-sdk-utils/api/types/OpenAiCompletionObject.js", "../../privategpt-sdk-utils/api/types/OpenAiMessageRole.js", "../../privategpt-sdk-utils/api/errors/UnprocessableEntityError.js", "../../privategpt-sdk-utils/api/resources/contextChunks/client/Client.js", "../../privategpt-sdk-utils/api/resources/contextualCompletions/client/Client.js", "../../privategpt-sdk-utils/api/resources/embeddings/client/Client.js", "../../privategpt-sdk-utils/api/resources/health/client/Client.js", "../../privategpt-sdk-utils/api/resources/ingestion/client/Client.js", "../../privategpt-sdk-utils/Client.js"],
  "sourcesContent": ["(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();\n  else if (typeof define === 'function' && define.amd) define(definition);\n  else context[name] = definition();\n})('urljoin', this, function () {\n\n  function normalize (strArray) {\n    var resultArray = [];\n    if (strArray.length === 0) { return ''; }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    }\n\n    // If the first part is a plain protocol, we combine it with the next part.\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    }\n\n    // There must be two or three slashes in the file protocol, two slashes in anything else.\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') { continue; }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n\n    }\n\n    var str = resultArray.join('/');\n    // Each input component is now separated by a single slash except the possible first plain protocol part.\n\n    // remove trailing slash before parameters or hash\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1');\n\n    // replace ? in parameters with &\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?': '') + parts.join('&');\n\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n\n});\n", "export * from './resources';\nexport * from './types';\nexport * from './errors';\n", "export * from './types';\nexport * from './client';\n", "export * from './client';\n", "export * from './client';\n", "export * from './client';\n", "export * from './client';\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\nexport class PrivategptApiError extends Error {\n    statusCode;\n    body;\n    constructor({ message, statusCode, body, }) {\n        super(buildMessage({ message, statusCode, body }));\n        Object.setPrototypeOf(this, PrivategptApiError.prototype);\n        if (statusCode != null) {\n            this.statusCode = statusCode;\n        }\n        if (body !== undefined) {\n            this.body = body;\n        }\n    }\n}\nfunction buildMessage({ message, statusCode, body, }) {\n    let lines = [];\n    if (message != null) {\n        lines.push(message);\n    }\n    if (statusCode != null) {\n        lines.push(`Status code: ${statusCode.toString()}`);\n    }\n    if (body != null) {\n        lines.push(`Body: ${JSON.stringify(body, undefined, 2)}`);\n    }\n    return lines.join('\\n');\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\nexport class PrivategptApiTimeoutError extends Error {\n    constructor() {\n        super('Timeout');\n        Object.setPrototypeOf(this, PrivategptApiTimeoutError.prototype);\n    }\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\nimport * as PrivategptApi from '../../../..';\nimport * as core from '../../../../../core';\nimport * as errors from '../../../../../errors';\nimport * as serializers from '../../../../../serialization';\nimport urlJoin from 'url-join';\nexport class Summarize {\n    _options;\n    constructor(_options) {\n        this._options = _options;\n    }\n    /**\n     * Given a list of messages comprising a conversation, return a response.\n     *\n     * Optionally include an initial `role: system` message to influence the way\n     * the LLM answers.\n     *\n     * If `use_context` is set to `true`, the model will use context coming\n     * from the ingested documents to create the response. The documents being used can\n     * be filtered using the `context_filter` and passing the document IDs to be used.\n     * Ingested documents IDs can be found using `/ingest/list` endpoint. If you want\n     * all ingested documents to be used, remove `context_filter` altogether.\n     *\n     * When using `'include_sources': true`, the API will return the source Chunks used\n     * to create the response, which come from the context provided.\n     *\n     * ```\n     * {\"id\":\"12345\",\"object\":\"completion.chunk\",\"created\":1694268190,\n     * \"model\":\"private-gpt\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\"Hello\"},\n     * \"finish_reason\":null}]}\n     * ```\n     * @throws {@link PrivategptApi.UnprocessableEntityError}\n     *\n     * @example\n     *     await privategptApi.contextualCompletions.chatCompletion({\n     *         messages: [],\n     *         contextFilter: {}\n     *     })\n     */\n    async summarizeStream(request, requestOptions, abortSignal) {\n        const _response = await core.fetcher({\n            abortSignal,\n            url: urlJoin(await core.Supplier.get(this._options.environment), 'v1/summarize'),\n            method: 'POST',\n            headers: {\n                'X-Fern-Language': 'JavaScript',\n            },\n            contentType: 'application/json',\n            body: await serializers.SummarizeBody.jsonOrThrow({ ...request, stream: true }, {\n                unrecognizedObjectKeys: 'strip',\n            }),\n            timeoutMs: requestOptions?.timeoutInSeconds != null\n                ? requestOptions.timeoutInSeconds * 1000\n                : 60000,\n            maxRetries: requestOptions?.maxRetries,\n            responseType: 'streaming',\n        });\n        if (_response.ok) {\n            const stream = new core.Stream({\n                // @ts-ignore\n                stream: _response.body,\n                terminator: '\\n',\n                parse: async (data) => {\n                    return await serializers.OpenAiCompletion.parseOrThrow(data, {\n                        unrecognizedObjectKeys: 'passthrough',\n                        allowUnrecognizedUnionMembers: true,\n                        allowUnrecognizedEnumValues: true,\n                        skipValidation: true,\n                        breadcrumbsPrefix: ['response'],\n                    });\n                },\n            });\n            return stream;\n        }\n        if (_response.error.reason === 'status-code') {\n            switch (_response.error.statusCode) {\n                case 422:\n                    throw new PrivategptApi.UnprocessableEntityError(await serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                        unrecognizedObjectKeys: 'passthrough',\n                        allowUnrecognizedUnionMembers: true,\n                        allowUnrecognizedEnumValues: true,\n                        breadcrumbsPrefix: ['response'],\n                    }));\n                default:\n                    throw new errors.PrivategptApiError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.body,\n                    });\n            }\n        }\n        switch (_response.error.reason) {\n            case 'non-json':\n                throw new errors.PrivategptApiError({\n                    statusCode: _response.error.statusCode,\n                    body: _response.error.rawBody,\n                });\n            case 'timeout':\n                throw new errors.PrivategptApiTimeoutError();\n            case 'unknown':\n                throw new errors.PrivategptApiError({\n                    message: _response.error.errorMessage,\n                });\n        }\n    }\n    async summarize(request, requestOptions) {\n        const _response = await core.fetcher({\n            url: urlJoin(await core.Supplier.get(this._options.environment), 'v1/summarize'),\n            method: 'POST',\n            headers: {\n                'X-Fern-Language': 'JavaScript',\n            },\n            contentType: 'application/json',\n            body: await serializers.SummarizeBody.jsonOrThrow(request, {\n                unrecognizedObjectKeys: 'strip',\n            }),\n            timeoutMs: requestOptions?.timeoutInSeconds != null\n                ? requestOptions.timeoutInSeconds * 1000\n                : 60000,\n            maxRetries: requestOptions?.maxRetries,\n            responseType: 'json',\n        });\n        if (_response.ok) {\n            return await serializers.SummarizeResponse.parseOrThrow(_response.body, {\n                unrecognizedObjectKeys: 'passthrough',\n                allowUnrecognizedUnionMembers: true,\n                allowUnrecognizedEnumValues: true,\n                breadcrumbsPrefix: ['response'],\n            });\n        }\n        if (_response.error.reason === 'status-code') {\n            switch (_response.error.statusCode) {\n                case 422:\n                    throw new PrivategptApi.UnprocessableEntityError(await serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                        unrecognizedObjectKeys: 'passthrough',\n                        allowUnrecognizedUnionMembers: true,\n                        allowUnrecognizedEnumValues: true,\n                        breadcrumbsPrefix: ['response'],\n                    }));\n                default:\n                    throw new errors.PrivategptApiError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.body,\n                    });\n            }\n        }\n        switch (_response.error.reason) {\n            case 'non-json':\n                throw new errors.PrivategptApiError({\n                    statusCode: _response.error.statusCode,\n                    body: _response.error.rawBody,\n                });\n            case 'timeout':\n                throw new errors.PrivategptApiTimeoutError();\n            case 'unknown':\n                throw new errors.PrivategptApiError({\n                    message: _response.error.errorMessage,\n                });\n        }\n    }\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\nimport { Summarize } from \"./summarize/client/Client\";\nexport class Recipes {\n    _options;\n    constructor(_options) {\n        this._options = _options;\n    }\n    _summarize;\n    get summarize() {\n        return (this._summarize ??= new Summarize(this._options));\n    }\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\nexport const OpenAiCompletionObject = {\n    Completion: 'completion',\n    CompletionChunk: 'completion.chunk',\n};\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\nexport const OpenAiMessageRole = {\n    Assistant: 'assistant',\n    System: 'system',\n    User: 'user',\n};\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\nimport * as errors from '../../errors';\nexport class UnprocessableEntityError extends errors.PrivategptApiError {\n    constructor(body) {\n        super({\n            message: 'UnprocessableEntityError',\n            statusCode: 422,\n            body: body,\n        });\n        Object.setPrototypeOf(this, UnprocessableEntityError.prototype);\n    }\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\nimport * as core from '../../../../core';\nimport * as PrivategptApi from '../../..';\nimport * as serializers from '../../../../serialization';\nimport urlJoin from 'url-join';\nimport * as errors from '../../../../errors';\nexport class ContextChunks {\n    _options;\n    constructor(_options) {\n        this._options = _options;\n    }\n    /**\n     * Given a `text`, returns the most relevant chunks from the ingested documents.\n     *\n     * The returned information can be used to generate prompts that can be\n     * passed to `/completions` or `/chat/completions` APIs. Note: it is usually a very\n     * fast API, because only the Embeddings model is involved, not the LLM. The\n     * returned information contains the relevant chunk `text` together with the source\n     * `document` it is coming from. It also contains a score that can be used to\n     * compare different results.\n     *\n     * The max number of chunks to be returned is set using the `limit` param.\n     *\n     * Previous and next chunks (pieces of text that appear right before or after in the\n     * document) can be fetched by using the `prev_next_chunks` field.\n     *\n     * The documents being used can be filtered using the `context_filter` and passing\n     * the document IDs to be used. Ingested documents IDs can be found using\n     * `/ingest/list` endpoint. If you want all ingested documents to be used,\n     * remove `context_filter` altogether.\n     * @throws {@link PrivategptApi.UnprocessableEntityError}\n     *\n     * @example\n     *     await privategptApi.contextChunks.chunksRetrieval({\n     *         text: \"string\",\n     *         contextFilter: {}\n     *     })\n     */\n    async chunksRetrieval(request, requestOptions) {\n        const _response = await core.fetcher({\n            url: urlJoin(await core.Supplier.get(this._options.environment), 'v1/chunks'),\n            method: 'POST',\n            headers: {\n                'X-Fern-Language': 'JavaScript',\n            },\n            contentType: 'application/json',\n            body: await serializers.ChunksBody.jsonOrThrow(request, {\n                unrecognizedObjectKeys: 'strip',\n            }),\n            timeoutMs: requestOptions?.timeoutInSeconds != null\n                ? requestOptions.timeoutInSeconds * 1000\n                : 60000,\n            maxRetries: requestOptions?.maxRetries,\n        });\n        if (_response.ok) {\n            return await serializers.ChunksResponse.parseOrThrow(_response.body, {\n                unrecognizedObjectKeys: 'passthrough',\n                allowUnrecognizedUnionMembers: true,\n                allowUnrecognizedEnumValues: true,\n                breadcrumbsPrefix: ['response'],\n            });\n        }\n        if (_response.error.reason === 'status-code') {\n            switch (_response.error.statusCode) {\n                case 422:\n                    throw new PrivategptApi.UnprocessableEntityError(await serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                        unrecognizedObjectKeys: 'passthrough',\n                        allowUnrecognizedUnionMembers: true,\n                        allowUnrecognizedEnumValues: true,\n                        breadcrumbsPrefix: ['response'],\n                    }));\n                default:\n                    throw new errors.PrivategptApiError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.body,\n                    });\n            }\n        }\n        switch (_response.error.reason) {\n            case 'non-json':\n                throw new errors.PrivategptApiError({\n                    statusCode: _response.error.statusCode,\n                    body: _response.error.rawBody,\n                });\n            case 'timeout':\n                throw new errors.PrivategptApiTimeoutError();\n            case 'unknown':\n                throw new errors.PrivategptApiError({\n                    message: _response.error.errorMessage,\n                });\n        }\n    }\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\nimport * as PrivategptApi from '../../..';\nimport * as core from '../../../../core';\nimport * as errors from '../../../../errors';\nimport * as serializers from '../../../../serialization';\nimport urlJoin from 'url-join';\nexport class ContextualCompletions {\n    _options;\n    constructor(_options) {\n        this._options = _options;\n    }\n    /**\n     * We recommend most users use our Chat completions API.\n     *\n     * Given a prompt, the model will return one predicted completion.\n     *\n     * Optionally include a `system_prompt` to influence the way the LLM answers.\n     *\n     * If `use_context`\n     * is set to `true`, the model will use context coming from the ingested documents\n     * to create the response. The documents being used can be filtered using the\n     * `context_filter` and passing the document IDs to be used. Ingested documents IDs\n     * can be found using `/ingest/list` endpoint. If you want all ingested documents to\n     * be used, remove `context_filter` altogether.\n     *\n     * When using `'include_sources': true`, the API will return the source Chunks used\n     * to create the response, which come from the context provided.\n     *\n     * ```\n     * {\"id\":\"12345\",\"object\":\"completion.chunk\",\"created\":1694268190,\n     * \"model\":\"private-gpt\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\"Hello\"},\n     * \"finish_reason\":null}]}\n     * ```\n     * @throws {@link PrivategptApi.UnprocessableEntityError}\n     *\n     * @example\n     *     await privategptApi.contextualCompletions.promptCompletionStream({\n     *         prompt: \"string\",\n     *         contextFilter: {}\n     *     })\n     */\n    async promptCompletionStream(request, requestOptions, abortSignal) {\n        const _response = await core.fetcher({\n            abortSignal,\n            url: urlJoin(await core.Supplier.get(this._options.environment), 'v1/completions'),\n            method: 'POST',\n            headers: {\n                'X-Fern-Language': 'JavaScript',\n            },\n            contentType: 'application/json',\n            body: await serializers.CompletionsBody.jsonOrThrow({ ...request, stream: true }, {\n                unrecognizedObjectKeys: 'strip',\n            }),\n            timeoutMs: requestOptions?.timeoutInSeconds != null\n                ? requestOptions.timeoutInSeconds * 1000\n                : 60000,\n            maxRetries: requestOptions?.maxRetries,\n            responseType: 'streaming',\n        });\n        if (_response.ok) {\n            const stream = new core.Stream({\n                // @ts-ignore\n                stream: _response.body,\n                terminator: '\\n',\n                parse: async (data) => {\n                    return await serializers.OpenAiCompletion.parseOrThrow(data, {\n                        unrecognizedObjectKeys: 'passthrough',\n                        allowUnrecognizedUnionMembers: true,\n                        allowUnrecognizedEnumValues: true,\n                        skipValidation: true,\n                        breadcrumbsPrefix: ['response'],\n                    });\n                },\n            });\n            return stream;\n        }\n        if (_response.error.reason === 'status-code') {\n            switch (_response.error.statusCode) {\n                case 422:\n                    throw new PrivategptApi.UnprocessableEntityError(await serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                        unrecognizedObjectKeys: 'passthrough',\n                        allowUnrecognizedUnionMembers: true,\n                        allowUnrecognizedEnumValues: true,\n                        breadcrumbsPrefix: ['response'],\n                    }));\n                default:\n                    throw new errors.PrivategptApiError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.body,\n                    });\n            }\n        }\n        switch (_response.error.reason) {\n            case 'non-json':\n                throw new errors.PrivategptApiError({\n                    statusCode: _response.error.statusCode,\n                    body: _response.error.rawBody,\n                });\n            case 'timeout':\n                throw new errors.PrivategptApiTimeoutError();\n            case 'unknown':\n                throw new errors.PrivategptApiError({\n                    message: _response.error.errorMessage,\n                });\n        }\n    }\n    /**\n     * We recommend most users use our Chat completions API.\n     *\n     * Given a prompt, the model will return one predicted completion.\n     *\n     * Optionally include a `system_prompt` to influence the way the LLM answers.\n     *\n     * If `use_context`\n     * is set to `true`, the model will use context coming from the ingested documents\n     * to create the response. The documents being used can be filtered using the\n     * `context_filter` and passing the document IDs to be used. Ingested documents IDs\n     * can be found using `/ingest/list` endpoint. If you want all ingested documents to\n     * be used, remove `context_filter` altogether.\n     *\n     * When using `'include_sources': true`, the API will return the source Chunks used\n     * to create the response, which come from the context provided.\n     *\n     * ```\n     * {\"id\":\"12345\",\"object\":\"completion.chunk\",\"created\":1694268190,\n     * \"model\":\"private-gpt\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\"Hello\"},\n     * \"finish_reason\":null}]}\n     * ```\n     * @throws {@link PrivategptApi.UnprocessableEntityError}\n     *\n     * @example\n     *     await privategptApi.contextualCompletions.promptCompletion({\n     *         prompt: \"string\",\n     *         contextFilter: {}\n     *     })\n     */\n    async promptCompletion(request, requestOptions) {\n        const _response = await core.fetcher({\n            url: urlJoin(await core.Supplier.get(this._options.environment), 'v1/completions'),\n            method: 'POST',\n            headers: {\n                'X-Fern-Language': 'JavaScript',\n            },\n            contentType: 'application/json',\n            body: await serializers.CompletionsBody.jsonOrThrow(request, {\n                unrecognizedObjectKeys: 'strip',\n            }),\n            timeoutMs: requestOptions?.timeoutInSeconds != null\n                ? requestOptions.timeoutInSeconds * 1000\n                : 60000,\n            maxRetries: requestOptions?.maxRetries,\n            responseType: 'json',\n        });\n        if (_response.ok) {\n            return await serializers.OpenAiCompletion.parseOrThrow(_response.body, {\n                unrecognizedObjectKeys: 'passthrough',\n                allowUnrecognizedUnionMembers: true,\n                allowUnrecognizedEnumValues: true,\n                breadcrumbsPrefix: ['response'],\n            });\n        }\n        if (_response.error.reason === 'status-code') {\n            switch (_response.error.statusCode) {\n                case 422:\n                    throw new PrivategptApi.UnprocessableEntityError(await serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                        unrecognizedObjectKeys: 'passthrough',\n                        allowUnrecognizedUnionMembers: true,\n                        allowUnrecognizedEnumValues: true,\n                        breadcrumbsPrefix: ['response'],\n                    }));\n                default:\n                    throw new errors.PrivategptApiError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.body,\n                    });\n            }\n        }\n        switch (_response.error.reason) {\n            case 'non-json':\n                throw new errors.PrivategptApiError({\n                    statusCode: _response.error.statusCode,\n                    body: _response.error.rawBody,\n                });\n            case 'timeout':\n                throw new errors.PrivategptApiTimeoutError();\n            case 'unknown':\n                throw new errors.PrivategptApiError({\n                    message: _response.error.errorMessage,\n                });\n        }\n    }\n    /**\n     * Given a list of messages comprising a conversation, return a response.\n     *\n     * Optionally include an initial `role: system` message to influence the way\n     * the LLM answers.\n     *\n     * If `use_context` is set to `true`, the model will use context coming\n     * from the ingested documents to create the response. The documents being used can\n     * be filtered using the `context_filter` and passing the document IDs to be used.\n     * Ingested documents IDs can be found using `/ingest/list` endpoint. If you want\n     * all ingested documents to be used, remove `context_filter` altogether.\n     *\n     * When using `'include_sources': true`, the API will return the source Chunks used\n     * to create the response, which come from the context provided.\n     *\n     * ```\n     * {\"id\":\"12345\",\"object\":\"completion.chunk\",\"created\":1694268190,\n     * \"model\":\"private-gpt\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\"Hello\"},\n     * \"finish_reason\":null}]}\n     * ```\n     * @throws {@link PrivategptApi.UnprocessableEntityError}\n     *\n     * @example\n     *     await privategptApi.contextualCompletions.chatCompletion({\n     *         messages: [],\n     *         contextFilter: {}\n     *     })\n     */\n    async chatCompletionStream(request, requestOptions, abortSignal) {\n        const _response = await core.fetcher({\n            abortSignal,\n            url: urlJoin(await core.Supplier.get(this._options.environment), 'v1/chat/completions'),\n            method: 'POST',\n            headers: {\n                'X-Fern-Language': 'JavaScript',\n            },\n            contentType: 'application/json',\n            body: await serializers.ChatBody.jsonOrThrow({ ...request, stream: true }, {\n                unrecognizedObjectKeys: 'strip',\n            }),\n            timeoutMs: requestOptions?.timeoutInSeconds != null\n                ? requestOptions.timeoutInSeconds * 1000\n                : 60000,\n            maxRetries: requestOptions?.maxRetries,\n            responseType: 'streaming',\n        });\n        if (_response.ok) {\n            const stream = new core.Stream({\n                // @ts-ignore\n                stream: _response.body,\n                terminator: '\\n',\n                parse: async (data) => {\n                    return await serializers.OpenAiCompletion.parseOrThrow(data, {\n                        unrecognizedObjectKeys: 'passthrough',\n                        allowUnrecognizedUnionMembers: true,\n                        allowUnrecognizedEnumValues: true,\n                        skipValidation: true,\n                        breadcrumbsPrefix: ['response'],\n                    });\n                },\n            });\n            return stream;\n        }\n        if (_response.error.reason === 'status-code') {\n            switch (_response.error.statusCode) {\n                case 422:\n                    throw new PrivategptApi.UnprocessableEntityError(await serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                        unrecognizedObjectKeys: 'passthrough',\n                        allowUnrecognizedUnionMembers: true,\n                        allowUnrecognizedEnumValues: true,\n                        breadcrumbsPrefix: ['response'],\n                    }));\n                default:\n                    throw new errors.PrivategptApiError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.body,\n                    });\n            }\n        }\n        switch (_response.error.reason) {\n            case 'non-json':\n                throw new errors.PrivategptApiError({\n                    statusCode: _response.error.statusCode,\n                    body: _response.error.rawBody,\n                });\n            case 'timeout':\n                throw new errors.PrivategptApiTimeoutError();\n            case 'unknown':\n                throw new errors.PrivategptApiError({\n                    message: _response.error.errorMessage,\n                });\n        }\n    }\n    async chatCompletion(request, requestOptions) {\n        const _response = await core.fetcher({\n            url: urlJoin(await core.Supplier.get(this._options.environment), 'v1/chat/completions'),\n            method: 'POST',\n            headers: {\n                'X-Fern-Language': 'JavaScript',\n            },\n            contentType: 'application/json',\n            body: await serializers.ChatBody.jsonOrThrow(request, {\n                unrecognizedObjectKeys: 'strip',\n            }),\n            timeoutMs: requestOptions?.timeoutInSeconds != null\n                ? requestOptions.timeoutInSeconds * 1000\n                : 60000,\n            maxRetries: requestOptions?.maxRetries,\n            responseType: 'json',\n        });\n        if (_response.ok) {\n            return await serializers.OpenAiCompletion.parseOrThrow(_response.body, {\n                unrecognizedObjectKeys: 'passthrough',\n                allowUnrecognizedUnionMembers: true,\n                allowUnrecognizedEnumValues: true,\n                breadcrumbsPrefix: ['response'],\n            });\n        }\n        if (_response.error.reason === 'status-code') {\n            switch (_response.error.statusCode) {\n                case 422:\n                    throw new PrivategptApi.UnprocessableEntityError(await serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                        unrecognizedObjectKeys: 'passthrough',\n                        allowUnrecognizedUnionMembers: true,\n                        allowUnrecognizedEnumValues: true,\n                        breadcrumbsPrefix: ['response'],\n                    }));\n                default:\n                    throw new errors.PrivategptApiError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.body,\n                    });\n            }\n        }\n        switch (_response.error.reason) {\n            case 'non-json':\n                throw new errors.PrivategptApiError({\n                    statusCode: _response.error.statusCode,\n                    body: _response.error.rawBody,\n                });\n            case 'timeout':\n                throw new errors.PrivategptApiTimeoutError();\n            case 'unknown':\n                throw new errors.PrivategptApiError({\n                    message: _response.error.errorMessage,\n                });\n        }\n    }\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\nimport * as core from '../../../../core';\nimport * as PrivategptApi from '../../..';\nimport * as serializers from '../../../../serialization';\nimport urlJoin from 'url-join';\nimport * as errors from '../../../../errors';\nexport class Embeddings {\n    _options;\n    constructor(_options) {\n        this._options = _options;\n    }\n    /**\n     * Get a vector representation of a given input.\n     *\n     * That vector representation can be easily consumed\n     * by machine learning models and algorithms.\n     * @throws {@link PrivategptApi.UnprocessableEntityError}\n     *\n     * @example\n     *     await privategptApi.embeddings.embeddingsGeneration({})\n     */\n    async embeddingsGeneration(request, requestOptions) {\n        const _response = await core.fetcher({\n            url: urlJoin(await core.Supplier.get(this._options.environment), 'v1/embeddings'),\n            method: 'POST',\n            headers: {\n                'X-Fern-Language': 'JavaScript',\n            },\n            contentType: 'application/json',\n            body: await serializers.EmbeddingsBody.jsonOrThrow(request, {\n                unrecognizedObjectKeys: 'strip',\n            }),\n            timeoutMs: requestOptions?.timeoutInSeconds != null\n                ? requestOptions.timeoutInSeconds * 1000\n                : 60000,\n            maxRetries: requestOptions?.maxRetries,\n        });\n        if (_response.ok) {\n            return await serializers.EmbeddingsResponse.parseOrThrow(_response.body, {\n                unrecognizedObjectKeys: 'passthrough',\n                allowUnrecognizedUnionMembers: true,\n                allowUnrecognizedEnumValues: true,\n                breadcrumbsPrefix: ['response'],\n            });\n        }\n        if (_response.error.reason === 'status-code') {\n            switch (_response.error.statusCode) {\n                case 422:\n                    throw new PrivategptApi.UnprocessableEntityError(await serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                        unrecognizedObjectKeys: 'passthrough',\n                        allowUnrecognizedUnionMembers: true,\n                        allowUnrecognizedEnumValues: true,\n                        breadcrumbsPrefix: ['response'],\n                    }));\n                default:\n                    throw new errors.PrivategptApiError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.body,\n                    });\n            }\n        }\n        switch (_response.error.reason) {\n            case 'non-json':\n                throw new errors.PrivategptApiError({\n                    statusCode: _response.error.statusCode,\n                    body: _response.error.rawBody,\n                });\n            case 'timeout':\n                throw new errors.PrivategptApiTimeoutError();\n            case 'unknown':\n                throw new errors.PrivategptApiError({\n                    message: _response.error.errorMessage,\n                });\n        }\n    }\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\nimport * as core from '../../../../core';\nimport urlJoin from 'url-join';\nimport * as serializers from '../../../../serialization';\nimport * as errors from '../../../../errors';\nexport class Health {\n    _options;\n    constructor(_options) {\n        this._options = _options;\n    }\n    /**\n     * Return ok if the system is up.\n     *\n     * @example\n     *     await privategptApi.health.health()\n     */\n    async health(requestOptions) {\n        const _response = await core.fetcher({\n            url: urlJoin(await core.Supplier.get(this._options.environment), 'health'),\n            method: 'GET',\n            headers: {\n                'X-Fern-Language': 'JavaScript',\n            },\n            contentType: 'application/json',\n            timeoutMs: requestOptions?.timeoutInSeconds != null\n                ? requestOptions.timeoutInSeconds * 1000\n                : 60000,\n            maxRetries: requestOptions?.maxRetries,\n        });\n        if (_response.ok) {\n            return await serializers.HealthResponse.parseOrThrow(_response.body, {\n                unrecognizedObjectKeys: 'passthrough',\n                allowUnrecognizedUnionMembers: true,\n                allowUnrecognizedEnumValues: true,\n                breadcrumbsPrefix: ['response'],\n            });\n        }\n        if (_response.error.reason === 'status-code') {\n            throw new errors.PrivategptApiError({\n                statusCode: _response.error.statusCode,\n                body: _response.error.body,\n            });\n        }\n        switch (_response.error.reason) {\n            case 'non-json':\n                throw new errors.PrivategptApiError({\n                    statusCode: _response.error.statusCode,\n                    body: _response.error.rawBody,\n                });\n            case 'timeout':\n                throw new errors.PrivategptApiTimeoutError();\n            case 'unknown':\n                throw new errors.PrivategptApiError({\n                    message: _response.error.errorMessage,\n                });\n        }\n    }\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\nimport * as PrivategptApi from '../../..';\nimport * as core from '../../../../core';\nimport * as errors from '../../../../errors';\nimport * as serializers from '../../../../serialization';\nimport urlJoin from 'url-join';\nexport class Ingestion {\n    _options;\n    constructor(_options) {\n        this._options = _options;\n    }\n    /**\n     * Ingests and processes a file.\n     *\n     * Deprecated. Use ingest/file instead.\n     * @throws {@link PrivategptApi.UnprocessableEntityError}\n     */\n    async ingest(file, requestOptions) {\n        const _request = new FormData();\n        _request.append('file', file);\n        const _response = await core.fetcher({\n            url: urlJoin(await core.Supplier.get(this._options.environment), 'v1/ingest'),\n            method: 'POST',\n            headers: {\n                'X-Fern-Language': 'JavaScript',\n            },\n            contentType: 'multipart/form-data; boundary=' + file.size,\n            body: _request,\n            timeoutMs: requestOptions?.timeoutInSeconds != null\n                ? requestOptions.timeoutInSeconds * 1000\n                : 60000,\n            maxRetries: requestOptions?.maxRetries,\n        });\n        if (_response.ok) {\n            return await serializers.IngestResponse.parseOrThrow(_response.body, {\n                unrecognizedObjectKeys: 'passthrough',\n                allowUnrecognizedUnionMembers: true,\n                allowUnrecognizedEnumValues: true,\n                breadcrumbsPrefix: ['response'],\n            });\n        }\n        if (_response.error.reason === 'status-code') {\n            switch (_response.error.statusCode) {\n                case 422:\n                    throw new PrivategptApi.UnprocessableEntityError(await serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                        unrecognizedObjectKeys: 'passthrough',\n                        allowUnrecognizedUnionMembers: true,\n                        allowUnrecognizedEnumValues: true,\n                        breadcrumbsPrefix: ['response'],\n                    }));\n                default:\n                    throw new errors.PrivategptApiError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.body,\n                    });\n            }\n        }\n        switch (_response.error.reason) {\n            case 'non-json':\n                throw new errors.PrivategptApiError({\n                    statusCode: _response.error.statusCode,\n                    body: _response.error.rawBody,\n                });\n            case 'timeout':\n                throw new errors.PrivategptApiTimeoutError();\n            case 'unknown':\n                throw new errors.PrivategptApiError({\n                    message: _response.error.errorMessage,\n                });\n        }\n    }\n    /**\n     * Ingests and processes a file, storing its chunks to be used as context.\n     *\n     * The context obtained from files is later used in\n     * `/chat/completions`, `/completions`, and `/chunks` APIs.\n     *\n     * Most common document\n     * formats are supported, but you may be prompted to install an extra dependency to\n     * manage a specific file type.\n     *\n     * A file can generate different Documents (for example a PDF generates one Document\n     * per page). All Documents IDs are returned in the response, together with the\n     * extracted Metadata (which is later used to improve context retrieval). Those IDs\n     * can be used to filter the context used to create responses in\n     * `/chat/completions`, `/completions`, and `/chunks` APIs.\n     * @throws {@link PrivategptApi.UnprocessableEntityError}\n     */\n    async ingestFile(file, requestOptions) {\n        const _request = new FormData();\n        _request.append('file', file);\n        const _response = await core.fetcher({\n            url: urlJoin(await core.Supplier.get(this._options.environment), 'v1/ingest/file'),\n            method: 'POST',\n            headers: {\n                'X-Fern-Language': 'JavaScript',\n            },\n            // contentType: 'multipart/form-data; boundary=' + _request.getBoundary(),\n            body: _request,\n            timeoutMs: requestOptions?.timeoutInSeconds != null\n                ? requestOptions.timeoutInSeconds * 1000\n                : 60000,\n            maxRetries: requestOptions?.maxRetries,\n        });\n        if (_response.ok) {\n            return await serializers.IngestResponse.parseOrThrow(_response.body, {\n                unrecognizedObjectKeys: 'passthrough',\n                allowUnrecognizedUnionMembers: true,\n                allowUnrecognizedEnumValues: true,\n                breadcrumbsPrefix: ['response'],\n            });\n        }\n        if (_response.error.reason === 'status-code') {\n            switch (_response.error.statusCode) {\n                case 422:\n                    throw new PrivategptApi.UnprocessableEntityError(await serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                        unrecognizedObjectKeys: 'passthrough',\n                        allowUnrecognizedUnionMembers: true,\n                        allowUnrecognizedEnumValues: true,\n                        breadcrumbsPrefix: ['response'],\n                    }));\n                default:\n                    throw new errors.PrivategptApiError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.body,\n                    });\n            }\n        }\n        switch (_response.error.reason) {\n            case 'non-json':\n                throw new errors.PrivategptApiError({\n                    statusCode: _response.error.statusCode,\n                    body: _response.error.rawBody,\n                });\n            case 'timeout':\n                throw new errors.PrivategptApiTimeoutError();\n            case 'unknown':\n                throw new errors.PrivategptApiError({\n                    message: _response.error.errorMessage,\n                });\n        }\n    }\n    /**\n     * Ingests and processes a text, storing its chunks to be used as context.\n     *\n     * The context obtained from files is later used in\n     * `/chat/completions`, `/completions`, and `/chunks` APIs.\n     *\n     * A Document will be generated with the given text. The Document\n     * ID is returned in the response, together with the\n     * extracted Metadata (which is later used to improve context retrieval). That ID\n     * can be used to filter the context used to create responses in\n     * `/chat/completions`, `/completions`, and `/chunks` APIs.\n     * @throws {@link PrivategptApi.UnprocessableEntityError}\n     *\n     * @example\n     *     await privategptApi.ingestion.ingestText({\n     *         fileName: \"string\",\n     *         text: \"string\"\n     *     })\n     */\n    async ingestText(request, requestOptions) {\n        const _response = await core.fetcher({\n            url: urlJoin(await core.Supplier.get(this._options.environment), 'v1/ingest/text'),\n            method: 'POST',\n            headers: {\n                'X-Fern-Language': 'JavaScript',\n            },\n            contentType: 'application/json',\n            body: await serializers.IngestTextBody.jsonOrThrow(request, {\n                unrecognizedObjectKeys: 'strip',\n            }),\n            timeoutMs: requestOptions?.timeoutInSeconds != null\n                ? requestOptions.timeoutInSeconds * 1000\n                : 60000,\n            maxRetries: requestOptions?.maxRetries,\n        });\n        if (_response.ok) {\n            return await serializers.IngestResponse.parseOrThrow(_response.body, {\n                unrecognizedObjectKeys: 'passthrough',\n                allowUnrecognizedUnionMembers: true,\n                allowUnrecognizedEnumValues: true,\n                breadcrumbsPrefix: ['response'],\n            });\n        }\n        if (_response.error.reason === 'status-code') {\n            switch (_response.error.statusCode) {\n                case 422:\n                    throw new PrivategptApi.UnprocessableEntityError(await serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                        unrecognizedObjectKeys: 'passthrough',\n                        allowUnrecognizedUnionMembers: true,\n                        allowUnrecognizedEnumValues: true,\n                        breadcrumbsPrefix: ['response'],\n                    }));\n                default:\n                    throw new errors.PrivategptApiError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.body,\n                    });\n            }\n        }\n        switch (_response.error.reason) {\n            case 'non-json':\n                throw new errors.PrivategptApiError({\n                    statusCode: _response.error.statusCode,\n                    body: _response.error.rawBody,\n                });\n            case 'timeout':\n                throw new errors.PrivategptApiTimeoutError();\n            case 'unknown':\n                throw new errors.PrivategptApiError({\n                    message: _response.error.errorMessage,\n                });\n        }\n    }\n    /**\n     * Lists already ingested Documents including their Document ID and metadata.\n     *\n     * Those IDs can be used to filter the context used to create responses\n     * in `/chat/completions`, `/completions`, and `/chunks` APIs.\n     *\n     * @example\n     *     await privategptApi.ingestion.listIngested()\n     */\n    async listIngested(requestOptions) {\n        const _response = await core.fetcher({\n            url: urlJoin(await core.Supplier.get(this._options.environment), 'v1/ingest/list'),\n            method: 'GET',\n            headers: {\n                'X-Fern-Language': 'JavaScript',\n            },\n            contentType: 'application/json',\n            timeoutMs: requestOptions?.timeoutInSeconds != null\n                ? requestOptions.timeoutInSeconds * 1000\n                : 60000,\n            maxRetries: requestOptions?.maxRetries,\n        });\n        if (_response.ok) {\n            return await serializers.IngestResponse.parseOrThrow(_response.body, {\n                unrecognizedObjectKeys: 'passthrough',\n                allowUnrecognizedUnionMembers: true,\n                allowUnrecognizedEnumValues: true,\n                breadcrumbsPrefix: ['response'],\n            });\n        }\n        if (_response.error.reason === 'status-code') {\n            throw new errors.PrivategptApiError({\n                statusCode: _response.error.statusCode,\n                body: _response.error.body,\n            });\n        }\n        switch (_response.error.reason) {\n            case 'non-json':\n                throw new errors.PrivategptApiError({\n                    statusCode: _response.error.statusCode,\n                    body: _response.error.rawBody,\n                });\n            case 'timeout':\n                throw new errors.PrivategptApiTimeoutError();\n            case 'unknown':\n                throw new errors.PrivategptApiError({\n                    message: _response.error.errorMessage,\n                });\n        }\n    }\n    /**\n     * Delete the specified ingested Document.\n     *\n     * The `doc_id` can be obtained from the `GET /ingest/list` endpoint.\n     * The document will be effectively deleted from your storage context.\n     * @throws {@link PrivategptApi.UnprocessableEntityError}\n     *\n     * @example\n     *     await privategptApi.ingestion.deleteIngested(\"string\")\n     */\n    async deleteIngested(docId, requestOptions) {\n        const _response = await core.fetcher({\n            url: urlJoin(await core.Supplier.get(this._options.environment), `v1/ingest/${docId}`),\n            method: 'DELETE',\n            headers: {\n                'X-Fern-Language': 'JavaScript',\n            },\n            contentType: 'application/json',\n            timeoutMs: requestOptions?.timeoutInSeconds != null\n                ? requestOptions.timeoutInSeconds * 1000\n                : 60000,\n            maxRetries: requestOptions?.maxRetries,\n        });\n        if (_response.ok) {\n            return _response.body;\n        }\n        if (_response.error.reason === 'status-code') {\n            switch (_response.error.statusCode) {\n                case 422:\n                    throw new PrivategptApi.UnprocessableEntityError(await serializers.HttpValidationError.parseOrThrow(_response.error.body, {\n                        unrecognizedObjectKeys: 'passthrough',\n                        allowUnrecognizedUnionMembers: true,\n                        allowUnrecognizedEnumValues: true,\n                        breadcrumbsPrefix: ['response'],\n                    }));\n                default:\n                    throw new errors.PrivategptApiError({\n                        statusCode: _response.error.statusCode,\n                        body: _response.error.body,\n                    });\n            }\n        }\n        switch (_response.error.reason) {\n            case 'non-json':\n                throw new errors.PrivategptApiError({\n                    statusCode: _response.error.statusCode,\n                    body: _response.error.rawBody,\n                });\n            case 'timeout':\n                throw new errors.PrivategptApiTimeoutError();\n            case 'unknown':\n                throw new errors.PrivategptApiError({\n                    message: _response.error.errorMessage,\n                });\n        }\n    }\n}\n", "/**\n * This file was auto-generated by Fern from our API Definition.\n */\nimport { ContextChunks } from './api/resources/contextChunks/client/Client';\nimport { ContextualCompletions } from './api/resources/contextualCompletions/client/Client';\nimport { Embeddings } from './api/resources/embeddings/client/Client';\nimport { Health } from './api/resources/health/client/Client';\nimport { Ingestion } from './api/resources/ingestion/client/Client';\nimport { Recipes } from './api/resources/recipes/Client';\nexport class PrivategptApiClient {\n    _options;\n    constructor(_options) {\n        this._options = _options;\n    }\n    _contextualCompletions;\n    get contextualCompletions() {\n        return (this._contextualCompletions ??= new ContextualCompletions(this._options));\n    }\n    _contextChunks;\n    get contextChunks() {\n        return (this._contextChunks ??= new ContextChunks(this._options));\n    }\n    _ingestion;\n    get ingestion() {\n        return (this._ingestion ??= new Ingestion(this._options));\n    }\n    _embeddings;\n    get embeddings() {\n        return (this._embeddings ??= new Embeddings(this._options));\n    }\n    _recipes;\n    get recipes() {\n        return (this._recipes ??= new Recipes(this._options));\n    }\n    _health;\n    get health() {\n        return (this._health ??= new Health(this._options));\n    }\n}\n"],
  "mappings": "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",
  "names": ["urlJoin", "import_url_join", "urlJoin", "import_url_join", "urlJoin", "import_url_join", "urlJoin", "import_url_join", "urlJoin", "import_url_join", "urlJoin"]
}
