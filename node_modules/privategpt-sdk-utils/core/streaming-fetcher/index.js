import { Buffer } from 'buffer';
export class Stream {
    stream;
    parse;
    terminator;
    constructor({ stream, parse, terminator, }) {
        this.stream = stream;
        this.parse = parse;
        this.terminator = terminator;
    }
    async *iterMessages() {
        let previous = '';
        for await (const chunk of this.stream) {
            const bufferChunk = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk);
            previous += bufferChunk;
            let terminatorIndex;
            while ((terminatorIndex = previous.indexOf(this.terminator)) >= 0) {
                const line = previous.slice(0, terminatorIndex).trimEnd();
                if (line) {
                    const data = line.replace('data: ', '');
                    if (data === '[DONE]') {
                        terminatorIndex = -1;
                        return;
                    }
                    const message = await this.parse(JSON.parse(data));
                    yield message;
                }
                previous = previous.slice(terminatorIndex + 1);
            }
        }
    }
    async *[Symbol.asyncIterator]() {
        for await (const message of this.iterMessages()) {
            yield message;
        }
    }
}
