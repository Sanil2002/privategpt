/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as PrivategptApi from '../../..';
import * as core from '../../../../core';
export declare namespace Ingestion {
    interface Options {
        environment: core.Supplier<string>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Ingestion {
    protected readonly _options: Ingestion.Options;
    constructor(_options: Ingestion.Options);
    /**
     * Ingests and processes a file.
     *
     * Deprecated. Use ingest/file instead.
     * @throws {@link PrivategptApi.UnprocessableEntityError}
     */
    ingest(file: File, requestOptions?: Ingestion.RequestOptions): Promise<PrivategptApi.IngestResponse>;
    /**
     * Ingests and processes a file, storing its chunks to be used as context.
     *
     * The context obtained from files is later used in
     * `/chat/completions`, `/completions`, and `/chunks` APIs.
     *
     * Most common document
     * formats are supported, but you may be prompted to install an extra dependency to
     * manage a specific file type.
     *
     * A file can generate different Documents (for example a PDF generates one Document
     * per page). All Documents IDs are returned in the response, together with the
     * extracted Metadata (which is later used to improve context retrieval). Those IDs
     * can be used to filter the context used to create responses in
     * `/chat/completions`, `/completions`, and `/chunks` APIs.
     * @throws {@link PrivategptApi.UnprocessableEntityError}
     */
    ingestFile(file: File, requestOptions?: Ingestion.RequestOptions): Promise<PrivategptApi.IngestResponse>;
    /**
     * Ingests and processes a text, storing its chunks to be used as context.
     *
     * The context obtained from files is later used in
     * `/chat/completions`, `/completions`, and `/chunks` APIs.
     *
     * A Document will be generated with the given text. The Document
     * ID is returned in the response, together with the
     * extracted Metadata (which is later used to improve context retrieval). That ID
     * can be used to filter the context used to create responses in
     * `/chat/completions`, `/completions`, and `/chunks` APIs.
     * @throws {@link PrivategptApi.UnprocessableEntityError}
     *
     * @example
     *     await privategptApi.ingestion.ingestText({
     *         fileName: "string",
     *         text: "string"
     *     })
     */
    ingestText(request: PrivategptApi.IngestTextBody, requestOptions?: Ingestion.RequestOptions): Promise<PrivategptApi.IngestResponse>;
    /**
     * Lists already ingested Documents including their Document ID and metadata.
     *
     * Those IDs can be used to filter the context used to create responses
     * in `/chat/completions`, `/completions`, and `/chunks` APIs.
     *
     * @example
     *     await privategptApi.ingestion.listIngested()
     */
    listIngested(requestOptions?: Ingestion.RequestOptions): Promise<PrivategptApi.IngestResponse>;
    /**
     * Delete the specified ingested Document.
     *
     * The `doc_id` can be obtained from the `GET /ingest/list` endpoint.
     * The document will be effectively deleted from your storage context.
     * @throws {@link PrivategptApi.UnprocessableEntityError}
     *
     * @example
     *     await privategptApi.ingestion.deleteIngested("string")
     */
    deleteIngested(docId: string, requestOptions?: Ingestion.RequestOptions): Promise<unknown>;
}
